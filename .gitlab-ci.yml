workflow:
  rules:
    - if: '$CI_COMMIT_REF_NAME == "main"'
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - if: '$CI_PIPELINE_SOURCE == "web"'

variables:
  GIT_STRATEGY: clone
  GIT_SUBMODULE_STRATEGY: normal
  GLOBAL_CMAKE_OPTIONS: -DRDMNETBROKER_BUILD_TESTS=ON
  PROJECT_BOT_USER: project_1241_bot
  SIGNTOOL: "C:\\Program Files (x86)\\Windows Kits\\10\\bin\\10.0.17763.0\\x86\\signtool.exe"
  
stages:
  - build
  - notarize
  - deploy

windows-build:
  stage: build
  tags:
    - ct-windows
  parallel:
    matrix:
      - CMAKE_GENERATOR_OPTIONS: -A Win32
        CMAKE_INSTALL: install_x86
        VCVARSALL_PLATFORM: x86
        ARTIFACT_TYPE: x86
        COMPILER_ARCH: msvc2019
      - CMAKE_GENERATOR_OPTIONS: -A x64
        CMAKE_INSTALL: install_x64
        VCVARSALL_PLATFORM: amd64
        ARTIFACT_TYPE: x64
        COMPILER_ARCH: msvc2019_64
  script:
    - python tools\ci\update_artifact_version.py
    - mkdir build
    - cd build
    - cmake -G "Visual Studio 16 2019" $env:CMAKE_GENERATOR_OPTIONS.Split(" ") "-DCMAKE_INSTALL_PREFIX=$env:CMAKE_INSTALL" $env:GLOBAL_CMAKE_OPTIONS.Split(" ") -DRDMNETBROKER_INCLUDE_SIGN_TOOLS=ON ..
    - cmake --build . --config RelWithDebInfo -j
    - ctest -C Release --output-on-failure
    - cmake -DBUILD_TYPE=RelWithDebInfo -P cmake_install.cmake
    - cd ..
    - Remove-Item -Path "symbols_$env:ARTIFACT_TYPE" -Recurse -Force
    - mkdir symbols_$env:ARTIFACT_TYPE
    - cp .\build\$env:CMAKE_INSTALL\symbols\RDMnetBrokerService.pdb .\symbols_$env:ARTIFACT_TYPE\RDMnetBrokerService.pdb
    - cp .\build\$env:CMAKE_INSTALL\symbols\RDMnetBrokerServiceCore.pdb .\symbols_$env:ARTIFACT_TYPE\RDMnetBrokerServiceCore.pdb
    - cp .\build\$env:CMAKE_INSTALL\lib\RDMnet.pdb .\symbols_$env:ARTIFACT_TYPE\RDMnet.pdb
    - cp .\build\$env:CMAKE_INSTALL\lib\RDMnetBroker.pdb .\symbols_$env:ARTIFACT_TYPE\RDMnetBroker.pdb
    - cp .\build\$env:CMAKE_INSTALL\lib\EtcPal.pdb .\symbols_$env:ARTIFACT_TYPE\EtcPal.pdb
    - .\tools\ci\windows_build_artifacts.bat
    - echo "Signing Installer"
    - $Env:ETC_SIGN_CREDS = "${NET_CODESIGN_USER}:${NET_CODESIGN_PASS}"
    - Start-Process -NoNewWindow -Wait -FilePath "build\_deps\etc_sign-src\etc_sign.bat" -ArgumentList "--initcert"
    - Start-Process -NoNewWindow -Wait -FilePath "build\_deps\etc_sign-src\etc_sign.bat" -ArgumentList "RDMnetBroker_$env:ARTIFACT_TYPE.msi"

  artifacts:
    when: always
    paths:
      - RDMnetBroker_$ARTIFACT_TYPE.msi
      - RDMnetBroker_$ARTIFACT_TYPE.msm
      - symbols_$ARTIFACT_TYPE/
      - build/$CMAKE_INSTALL/bin/RDMnetBrokerService.exe
    reports:
      junit: build/tests/test-results/*.xml

macos-build:
  stage: build
  tags:
    - ct-macos
  script:
    - pip3 config set global.index-url https://artifactory.etcconnect.com/artifactory/api/pypi/ETC-PyPI/simple
    - pip3 config set global.trusted-host artifactory.etcconnect.com
    - pip3 install etcdevtool
    - python3 tools/ci/update_artifact_version.py
    - mkdir build
    - cd build
    - cmake -DCMAKE_INSTALL_PREFIX=install ${GLOBAL_CMAKE_OPTIONS} -DRDMNETBROKER_INCLUDE_SIGN_TOOLS=ON ..
    - cmake --build . --config Release -j
    - cmake -P cmake_install.cmake
    - ctest --output-on-failure
    - cd ..
    - python3 tools/install/macos/macos_build_package.py
  artifacts:
    when: always
    paths:
      - RDMnetBroker.pkg
      - build/_deps/etc_mac_notarize-src/
    reports:
      junit: build/tests/test-results/*.xml

macos-notarize:
 stage: notarize
 tags:
   - ct-mac-m2
 dependencies:
   - macos-build
 script:
   - echo 'Notarizing Installer'
   - security unlock-keychain -p build /Users/gitlab-runner/Library/Keychains/login.keychain-db
   - python3 build/_deps/etc_mac_notarize-src/notarize.py --PACKAGE_FILEPATH ./RDMnetBroker.pkg --KEYCHAIN notarytool-password
 artifacts:
   when: always
   paths:
     - RDMnetBroker.pkg

# Deploy versioned build
include:
  - project: 'etc/common-tech/tools/gitlab-ci-util'
    ref: v2.1.1
    file: '/ci-yml/deploy-versioned-build.yml'

github-deploy:
  stage: deploy
  rules:
    - if: '$CI_PIPELINE_SOURCE == "web" && $NEW_BUILD_VERSION =~ /^\d+\.\d+\.\d+\.\d+$/ && $CI_COMMIT_REF_NAME == "main"'
  tags:
    - etc-linux-docker
  dependencies:
    - windows-build
    - macos-notarize
  image: etc-docker.artifactory.etcconnect.com/python:latest
  script:
    - pip install requests PyGithub
    - python3 tools/ci/deploy_to_github_release.py ${NEW_BUILD_VERSION}

artifactory-deploy:
  stage: deploy
  rules:
    - if: '$CI_PIPELINE_SOURCE == "web" && $NEW_BUILD_VERSION =~ /^\d+\.\d+\.\d+\.\d+$/ && $CI_COMMIT_REF_NAME == "main"'
  tags:
    - etc-linux-docker
  dependencies:
    - windows-build
    - macos-notarize
  image: etc-docker.artifactory.etcconnect.com/python:latest
  script:
    - pip install requests
    - python3 tools/ci/deploy_to_artifactory.py ${NEW_BUILD_VERSION}

artifactory-publish-symbols:
  stage: deploy
  rules:
    - if: '$CI_PIPELINE_SOURCE == "web" && $NEW_BUILD_VERSION =~ /^\d+\.\d+\.\d+\.\d+$/ && $CI_COMMIT_REF_NAME == "main"'
  tags:
    - ct-windows
  dependencies:
    - windows-build
  parallel:
    matrix:
      - CMAKE_INSTALL: install_x86
        ARTIFACT_TYPE: x86
        COMPILER_ARCH: msvc2019
      - CMAKE_INSTALL: install_x64
        ARTIFACT_TYPE: x64
        COMPILER_ARCH: msvc2019_64
  script:
    - .\tools\ci\index_and_publish_symbols.bat
