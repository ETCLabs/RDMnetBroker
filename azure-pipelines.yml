# This is the Azure CI Pipeline for the RDMnetBroker repository that includes
# jobs for building and testing on various platforms, as well as
# deploying installers to BinTray.

trigger:
  branches:
    include:
    - develop
    - master
    - release/*
    - refs/tags/v*.*.*.*

pr:
- develop

variables:
  broker_artifact_version: 'not_initialized'
  broker_installer_artifact: standalone\bin\Release\EtcRdmnetBroker.msi
  broker_merge_artifact: merge\bin\Release\EtcRdmnetBroker.msi

stages:
- stage: build_and_test
  displayName: 'Build and Test RDMnet Broker'
  jobs:
  # Build and test RDMnetBroker on Windows using CMake and Visual Studio 2017.
  - job: windows_build_and_test
    displayName: 'Windows'
    pool:
      vmImage: 'vs2017-win2016'
    strategy:
      matrix:
        Win32:
          cmake_generator: 'Visual Studio 15 2017'
          artifact_type: x86
# We are currently only building 32-bit broker services
#        x64:
#          CMAKE_GENERATOR: 'Visual Studio 15 2017 Win64'
#          ARTIFACT_TYPE: x64
    steps:
      - script: |
          cd $(Build.SourcesDirectory)
          mkdir build
          cd build
          cmake --version
          cmake -G "%CMAKE_GENERATOR%" -DCMAKE_INSTALL_PREFIX=install ..
        displayName: 'Configure Project'
      - task: VSBuild@1
        displayName: 'Build Project'
        inputs:
          solution: $(Build.SourcesDirectory)\build\RDMnetBroker.sln
          configuration: Release
      - script: |
          cd $(Build.SourcesDirectory)\build
          ctest -C Release -T Test --output-on-failure
        displayName: 'Run Tests'
      - task: PublishTestResults@2
        displayName: 'Publish Test Results'
        inputs:
          testResultsFormat: 'CTest'
          testResultsFiles: '**/Test.xml'
          failTaskOnFailedTests: true
      - script: |
          cd $(Build.SourcesDirectory)\build
          cmake -P cmake_install.cmake
        displayName: 'Install Project Artifacts'
      - task: MSBuild@1
        inputs:
          solution: $(Build.SourcesDirectory)\tools\install\windows\BrokerInstall.sln
          platform: $(WinArtifactType)
          msbuildArguments: /p:RunWixToolsOutOfProc=true
        displayName: 'Build Windows Installer'
      - task: DownloadSecureFile@1
        name: codeSignCertWindows
        displayName: 'Download Code Signing Certificate'
        inputs:
          secureFile: 'codesign_cert_windows.pfx'
      - template: tools/ci/azure_templates/initialize_artifact_version.yml
      - script: |
          cd $(Build.SourcesDirectory)\tools\install\windows
          copy %BROKER_INSTALLER_ARTIFACT% RDMnetBroker.msi
          call "C:\Program Files (x86)\Microsoft Visual Studio\2017\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" %VCVARSALL_PLATFORM%
          signtool.exe sign /v /a /tr "http://timestamp.digicert.com" /td sha256 /fd sha256 /f $(codeSignCertWindows.secureFilePath) /p $(codesign_cert_secret) RDMnetBroker.msi > NUL
          copy RDMnetBroker.msi $(Build.ArtifactStagingDirectory)\RDMnetBroker_%RDMNET_ARTIFACT_VERSION%_%ARTIFACT_TYPE%.msi
          copy %BROKER_MERGE_ARTIFACT% $(Build.ArtifactStagingDirectory)\RDMnetBroker_%RDMNET_ARTIFACT_VERSION%_%ARTIFACT_TYPE%.msm
        displayName: 'Sign Broker Installer'
      - task: PublishBuildArtifacts@1
        inputs:
          pathtoPublish: '$(Build.ArtifactStagingDirectory)'
          artifactName: 'broker_windows_$(WinArtifactType)'
  # Build and test RDMnetBroker on macOS using CMake and Clang.
  - job: macos_build_and_test
    displayName: 'macOS'
    pool:
      vmImage: 'macos-10.14'
    steps:
      - script: |
          cd $(Build.SourcesDirectory)
          mkdir build
          cd build
          cmake --version
          cmake -G "Unix Makefiles" ..
          make
        displayName: 'Build Project'
      - script: |
          cd $(Build.SourcesDirectory)/build
          ctest -T Test --output-on-failure
        displayName: 'Run Tests'
      - task: PublishTestResults@2
        displayName: 'Publish Test Results'
        inputs:
          testResultsFormat: 'CTest'
          testResultsFiles: '**/Test.xml'
          failTaskOnFailedTests: true

- stage: deploy_binaries
  displayName: 'Deploy Broker Binaries'
  condition: and(succeeded('build_and_test'), startsWith(variables['Build.SourceBranch'], 'refs/tags/'))
  jobs:
  - job: bintray_deploy
    displayName: 'BinTray Deploy'
    pool:
      vmImage: 'ubuntu-16.04'
    steps:
    - script: |
        cd tools/version
        version=$(<current_version.txt)
        echo "##vso[task.setvariable variable=RDMnetVersion]$version"
      displayName: 'Obtain Broker Version'
    - template: tools/ci/azure_templates/deploy_artifact.yml
      parameters:
        artifactName: broker_installer_windows_x86
        artifactFile: RDMnetBroker_$(RDMnetVersion)_x86.msi
        artifactVersion: $(RDMnetVersion)
    - template: tools/ci/azure_templates/deploy_artifact.yml
      parameters:
        artifactName: broker_merge_module_windows_x86
        artifactFile: RDMnetBroker_$(RDMnetVersion)_x86.msm
        artifactVersion: $(RDMnetVersion)
