"""Finds the VC Redist merge module installed with Visual Studio 2017.

If Visual Studio ever allows their variable VCToolsRedistDir to be referenced
by a project, this script will no longer be necessary.
"""
import os
import sys

SCRIPT_DIRECTORY = os.path.dirname(os.path.abspath(__file__))
OUTPUT_DIR = os.path.join(SCRIPT_DIRECTORY, "GeneratedFiles")
OUTPUT_FILE_NAME = "vcredist.wxi"
WIX_INCLUDE_TEMPLATE = """<!-- THIS FILE IS GENERATED BY {} AND IS NOT INTENDED TO BE CHECKED INTO SOURCE CONTROL -->
<Include>
  <?define VcRedistInstallLoc = "@REPLACEME@" ?>
</Include>
""".format(os.path.basename(sys.argv[0]))

if len(sys.argv) != 2:
    print('Usage: {} <Visual Studio 2017 Install Directory>'.format(
          sys.argv[0]))
    sys.exit(1)

vs_install = sys.argv[1].strip('"')
vc_redist_parent = os.path.join(vs_install, 'VC', 'Redist', 'MSVC')

if not os.path.isdir(vc_redist_parent):
    print('Error: {} does not seem to be a valid VS2017 install location.'.format(
          vs_install))
    sys.exit(1)

dirs = [name for name in os.listdir(vc_redist_parent) if os.path.isdir(
    os.path.join(vc_redist_parent, name))]

correct_dir_parts = None

# The redist install directories are contained in a directory that is named with
# a version number of the form x.y.z. We try to find the latest version number
# of that form.
for dirname in dirs:
    dir_parts = dirname.split('.')
    if len(dir_parts) != 3:
        continue
    if not correct_dir_parts:
        correct_dir_parts = dir_parts
    else:
        # Compare this directory's version to the highest we have stored
        for cur_part, new_part in zip(correct_dir_parts, dir_parts):
            if int(new_part) > int(cur_part):
                # This directory is a higher version than the current
                correct_dir_parts = dir_parts
                break
            elif int(new_part) < int(cur_part):
                # This directory is a lower version than the current
                break

if not correct_dir_parts:
    print('Error: No valid version numbered directory found at {}.'.format(
        vc_redist_parent))
    sys.exit(1)

try:
    if not os.path.exists(OUTPUT_DIR):
        os.mkdir(OUTPUT_DIR)
    with open(os.path.join(OUTPUT_DIR, OUTPUT_FILE_NAME), 'w') as f:
        f.write(WIX_INCLUDE_TEMPLATE.replace('@REPLACEME@', os.path.join(
            vc_redist_parent, '.'.join(correct_dir_parts))))
except OSError:
    print("Error: couldn't open output file!")
    sys.exit(1)
